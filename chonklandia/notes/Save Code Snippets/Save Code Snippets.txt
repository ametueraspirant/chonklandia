// #TEST
var buffer = buffer_load("isometric_csv_b.json");
var json = buffer_read(buffer, buffer_text);
buffer_delete(buffer);
testgrid = json_parse(json);
show_debug_message(testgrid.layers[0]);

// check if the sprite is in the camera
if(x_sq > global.cam._x - grid.spr.w
&& x_sq < global.cam._x + global.cam.w + grid.spr.w
&& y_sq > global.cam._y - grid.spr.h
&& y_sq < global.cam._y + global.cam.h + grid.spr.h) {



var _new_grid = ds_grid_create(1, 1);
var _top_buffer = vertex_create_buffer();
vertex_begin(_top_buffer, global.v_format);
for(var xx = 0; xx < ds_grid_width(_in_grid); xx++) {
	for(var yy = 0; yy < ds_grid_height(_in_grid); yy++) {
		render_top_face(_top_buffer, _in_grid, xx, yy, _origin, _tex_size);
	}
}
vertex_end(_top_buffer);

var _sides_buffer = vertex_create_buffer();
vertex_begin(_sides_buffer, global.v_format);
for(var xx = 0; xx < ds_grid_width(_in_grid); xx++) {
	for(var yy = 0; yy < ds_grid_height(_in_grid); yy++) {
		render_lr_faces(_sides_buffer, _in_grid, xx, yy, _origin, _tex_size, false);
		render_lr_faces(_sides_buffer, _in_grid, xx, yy, _origin, _tex_size, true);
		render_fb_faces(_sides_buffer, _in_grid, xx, yy, _origin, _tex_size, false);
		render_fb_faces(_sides_buffer, _in_grid, xx, yy, _origin, _tex_size, true);
	}
}
vertex_end(_sides_buffer);

_new_grid[# 0, 0] = [_top_buffer, _sides_buffer];
return _new_grid;